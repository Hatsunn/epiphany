<!DOCTYPE node PUBLIC
'-//freedesktop//DTD D-BUS Object Introspection 1.0//EN'
'http://www.freedesktop.org/standards/dbus/1.0/introspect.dtd'>
<node>

  <!--
      org.gnome.Epiphany.WebAppProvider:
      @short_description: Webapp provider interface

      The interface used for handling Epiphany Webapps in GNOME Software.

      This documentation describes version 1 of this interface.
  -->
  <interface name="org.gnome.Epiphany.WebAppProvider">
    <!--
        version:

        The API version number.
    -->
    <property name="version" type="u" access="read"/>

    <!--
        sandboxed:

        This indicates whether Epiphany is running under Flatpak or a
        Flatpak-compatible sandbox which means that portals will be necessary
        for installing or removing web apps from the host system.
    -->
    <property name="sandboxed" type="b" access="read"/>

    <!--
        GetInstalledWebApps:
        @webapps: An array of dictionaries, one for each installed Epiphany web
          app.

        Returns the set of installed Epiphany web applications.

        The following information may be included in each @webapps dictionary:
        <variablelist>
          <varlistentry>
            <term>desktop-path s</term>
            <listitem><para>
              The path to the .desktop file on the local filesystem.
            </para></listitem>
          </varlistentry>
          <varlistentry>
            <term>name s</term>
            <listitem><para>
              The human readable name of the application.
            </para></listitem>
          </varlistentry>
          <varlistentry>
            <term>url s</term>
            <listitem><para>
              The URL of the application.
            </para></listitem>
          </varlistentry>
          <varlistentry>
            <term>icon-path s</term>
            <listitem><para>
              The path to the icon on the local filesystem.
            </para></listitem>
          </varlistentry>
          <varlistentry>
            <term>install-date t</term>
            <listitem><para>
              The install time, in seconds since the UNIX epoch.
            </para></listitem>
          </varlistentry>
        </variablelist>

        Clients should gracefully handle unrecognized keys in the @webapps
        dictionary, to allow extending it in the future without using new
        interface and method names.
    -->
    <method name="GetInstalledWebApps">
      <arg type="aa{sv}" name="webapps" direction="out" />
    </method>

    <!--
        InstallWebApp:
        @url: the URL of the web app
        @name: the human readable name of the web app
        @icon_path: the path to the icon on the local filesystem
        @install_token: the token acquired via org.freedesktop.portal.InstallDynamicLauncher

        Installs a web app. This interface is expected to be used by trusted
        system components such as GNOME Software, which can acquire an
        @install_token by talking to the InstallDynamicLauncher portal. This allows Epiphany
        to install the web app without user interaction and despite being sandboxed.
        This is desirable because the user would've already clicked "Install" in
        Software; they should not have to confirm the operation again in a different
        app (Epiphany).

        The @install_token can be the empty string if and only if Epiphany is
        not running as a Flatpak (or similar sandbox, see the "sandboxed" property).

        The @icon_path only needs to be valid for the duration of the method call,
        since the icon will be copied elsewhere.
    -->
    <method name="InstallWebApp">
      <arg type="s" name="url" direction="in" />
      <arg type="s" name="name" direction="in" />
      <arg type="s" name="icon_path" direction="in" />
      <arg type="s" name="install_token" direction="in" />
    </method>

    <!--
        UninstallWebApp:
        @desktop_path: the path to the .desktop file of an installed web app,
          as returned by GetInstalledWebApps()

        Uninstalls a web app. Note that the @desktop_path is the target of a
        symbolic link created in $XDG_DATA_DIRS, not the path of the symbolic
        link itself. If you use the path returned by GetInstalledWebApps() you
        don't have to worry about that distinction.

        An error will be returned if the specified web app is not installed.
    -->
    <method name="UninstallWebApp">
      <arg type="s" name="desktop_path" direction="in" />
    </method>
  </interface>
</node>
